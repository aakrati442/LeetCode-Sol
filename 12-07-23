class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
       boolean[] vis = new boolean[graph.length];
        boolean[] isSafe = new boolean[graph.length];
        for(int i=0;i<graph.length;i++){
            if(!vis[i]){
                dfs(graph,i,vis,isSafe);
            }
        }

        List<Integer> ans = new ArrayList<>();

        for(int i=0;i<isSafe.length;i++){
            if(isSafe[i]){
                ans.add(i);
            }
        }
        return ans;
    }

    private boolean dfs(int[][] graph,int curr,boolean[] vis,boolean[] isSafe){
        if(isSafe[curr] || graph[curr].length==0){
            return isSafe[curr] = true;
        }
        if(vis[curr]){
            return false;
        }
        vis[curr]=true;
        boolean res = true;
        for(int x:graph[curr]){
            res = res&&dfs(graph,x,vis,isSafe);
        }
        return isSafe[curr] = res; 
    }
}
